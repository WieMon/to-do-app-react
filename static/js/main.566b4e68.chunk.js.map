{"version":3,"sources":["components/AddTask/AddTask.js","components/Task/Task.js","components/TaskList/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","length","props","add","alert","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","important","active","finishDate","style","color","change","delete","finish","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","App","counter","addTask","prevState","changeTaskStatus","forEach","getTime","deleteTask","index","findIndex","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.566b4e68.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './AddTask.scss';\n\nclass AddTask extends Component {\n  minDate = new Date().toISOString().slice(0,10);\n\n  static propTypes = {\n    add: PropTypes.func,\n  }\n\n  state = {\n    text: '',\n    checked: false,\n    date: this.minDate,\n  }\n\n  handleText = (e) => {\n    this.setState({\n      text: e.target.value,\n    });\n  }\n\n  handleCheckbox = (e) => {\n    this.setState({\n      checked: e.target.checked,\n    });\n  }\n\n  handleDate = (e) => {\n    this.setState({\n      date: e.target.value,\n    });\n  }\n\n  handleClick = () => {\n    const {text, checked, date} = this.state;\n\n    if(text.length > 2 && text.length < 30) {\n      const add = this.props.add(text, date, checked);\n      if(add) {\n        this.setState({\n          text: '',\n          checked: false,\n          date: this.minDate,\n        });\n      }\n    } else {\n      alert('Task cannot be shorter than 2 characters and longer than 20 characters');\n    }\n  }\n\n  render() {\n    let maxDate = this.minDate.slice(0,4) * 1 + 1; //eslint-disable-line\n    maxDate = `${maxDate}-12-31`;\n\n    return (\n      <div className='AddTask'>\n        <div className='AddTask__wrapper'>\n          <input className='AddTask__input' type='text' placeholder='task' value={this.state.text} onChange={this.handleText} />\n          <div>\n            <input className='AddTask__checkbox btn-short' id='important' type='checkbox' checked={this.state.checked} onChange={this.handleCheckbox} />\n            <label className='AddTask__label' htmlFor='important'>Important</label>\n          </div>\n        </div>\n        <div className='AddTask__wrapper'>\n          <input className='AddTask__input' type='date' value={this.state.date} min={this.minDate} max={this.maxDate} onChange={this.handleDate} />\n          <button className='btn-long' onClick={this.handleClick}>Add</button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Task.scss';\n\nconst Task = (props) => {\n  const{id, text, date, important, active, finishDate} = props.task;\n\n  const style = {\n    color: 'red',\n  };\n\n  if(active) {\n    return (\n      <div className='Task'>\n        <div className='Task__active-one'>\n          <strong style={important ? style : null}>{text}</strong> <span>({date}) </span>\n        </div>\n        <div className='Task__active-two'>\n          <button className='btn-long' onClick={() => props.change(id)}>Done</button>\n          <button className='Task__btn-delete' onClick={() => props.delete(id)}>X</button>\n        </div>\n      </div>\n    );\n  } else {\n    const finish = new Date(finishDate).toISOString().slice(0,10);\n\n    return (\n      <div className='Task'>\n        <div className='Task__done'>\n          <strong>{text}</strong> <span>({date}) </span>\n          <br />\n          <span>(Completed on: {finish})</span>\n        </div>\n        <div className='Task__done'>\n          <button className='Task__btn-delete' onClick={() => props.delete(id)}>X</button>\n        </div>\n      </div>\n    );\n  }\n};\n\nTask.propTypes = {\n  text: PropTypes.string,\n  task: PropTypes.object,\n  change: PropTypes.func,\n  delete: PropTypes.func,\n  finishDate: PropTypes.object,\n};\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from '../Task//Task';\nimport './TaskList.scss';\n\nconst TaskList = (props) => {\n  const active = props.tasks.filter(task => task.active);\n  const done = props.tasks.filter(task => !task.active);\n\n  if (active.length >= 2) {\n    active.sort((a, b) => {\n      a = a.text.toLowerCase();\n      b = b.text.toLowerCase();\n\n      if (a > b) return 1;\n      if (a < b) return -1;\n      return 0;\n    });\n  }\n\n  if (done.length >= 2) {\n    done.sort((a, b) => {\n      if (a.finishDate < b.finishDate) {\n        return 1;\n      }\n      if (a.finishDate > b.finishDate){\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  const activeTasks = active.map(task =>\n    <Task\n      key={task.id}\n      task={task}\n      change={props.change}\n      delete={props.delete}\n    />);\n\n  const doneTasks = done.map(task =>\n    <Task\n      key={task.id}\n      task={task}\n      change={props.change}\n      delete={props.delete}\n    />);\n\n  return (\n    <div className='TaskList'>\n      <div className='TaskList__active active'>\n        <h2 className='TaskList__title-active' >Tasks to do</h2>\n        {activeTasks}\n      </div>\n      <div className='TaskList__done done'>\n        <h2 className='TaskList__title-done'>Tasks done</h2>\n        {doneTasks}\n      </div>\n    </div>\n  );\n};\n\nTaskList.propTypes = {\n  tasks: PropTypes.array,\n  change: PropTypes.func,\n  delete: PropTypes.func,\n};\n\nexport default TaskList;\n","import React, {Component} from 'react';\nimport AddTask from './components/AddTask/AddTask';\nimport TaskList from './components/TaskList/TaskList';\nimport './App.scss';\n\n\nclass App extends Component {\n  counter = 3;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'Buy a new laptop',\n        date: '2020-10-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: 'Pay the rent',\n        date: '2020-09-30',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: 'Happy Friday beer',\n        date: '2020-10-02',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n    ],\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task],\n    }));\n    return true;\n  }\n\n  changeTaskStatus = (id) => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if(task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks,\n    });\n  }\n\n  deleteTask = (id) => {\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks,\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1 className='App__title'>To-Do List</h1>\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} change={this.changeTaskStatus} delete={this.deleteTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}